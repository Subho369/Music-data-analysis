
------ [Easy Level]


--1  Who is the senior most employee based on job title?

select top 1 CONCAT(first_name,' ', last_name) as senior_most_employee
from Employee 
order by levels desc

--2  Which countries have the most invoices?

select top 1 billing_country,COUNT(invoice_id)as invoice_cnt 
from Invoice
group by billing_country
order by invoice_cnt desc;

--3  What are the top 3 values of total invoice?

with 
total_invoice_count as
(
select total,COUNT(total) as total_invoice_cnt 
from Invoice
group by total

)
select top 3 total 
from total_invoice_count
order by total desc;


--4  Which city has the best customers?
     We would like to throw a promotional music festival in the city we made the most money.
     Write a query that returns one city has the highest sum of invoice totals.

select top 1 billing_city, SUM(total)as total_invoice 
from Invoice
group by billing_city
order by total_invoice desc;


--5  Who is the best customer?
     The customer who has spent the most money will be declared the best customer.
     Write a query that returns the person who has spent the most money.

with 
top_cus_id as
(
select top 1 customer_id, SUM(total) as money_spent 
from Invoice
group by customer_id
order by money_spent desc
)
select c.customer_id,CONCAT(first_name, ' ', last_name) as best_customer,money_spent
from top_cus_id as tc 
inner join Customer as c on tc.customer_id=c.customer_id;


------ [Moderate level] 

--1  Write a query to return the email first name, last name, and genre of all rock music listeners.
     Return your list order alphabetically by email starting with A.


select distinct email,first_name,last_name
from Customer as c 
inner join invoice as i on c.customer_id=i.customer_id
inner join Invoice_line as il on il.invoice_id=i.invoice_id
inner join Track as t on t.track_id=il.track_id
where genre_id=1
order by email ;

--2  Let's invite the artists who have written the most rock music in our data set.
     Write a query that returns the artist's name and total track count of the top 10 rock bands.

select top 10 artist_name,COUNT(track_id) track_cnt
from Artist as a 
inner join Album as al on a.artist_id=al.artist_id
inner join Track as t  on al.album_id=t.album_id
inner join Genre as g on t.genre_id=g.genre_id
where genre_name = 'rock'
group by artist_name
order by track_cnt  desc
;

--3  Return all the track names that have a song length longer than the average song length written.
     Written the name and milliseconds for each track ordered by the song length with the largest song listed first.


select distinct track_name,milliseconds 
from Track
where milliseconds > (select AVG(milliseconds) from Track)
order by milliseconds desc;


-------- [Advance level]

--1  Find how much amount spent by each customer on the top selling artist?
     Write a query to return customer name, artist name and total spent.

with 
top_selling_artist as
(
select top 1 artist_name,sum(il.unit_price*quantity) as total_revenue
from Artist as a
inner join Album as al on a.artist_id=al.artist_id
inner join Track as t  on al.album_id=t.album_id
inner join Invoice_line as il on il.track_id=t.track_id
group by artist_name
order by total_revenue desc
)

select CONCAT(c.first_name,' ',c.last_name), ta.artist_name as top_selling_artist, 
sum(il.unit_price*quantity) as total_spent_by_customer 
from Artist as a 
inner join Album as al on a.artist_id=al.artist_id
inner join Track as t  on t.album_id=al.album_id
inner join Invoice_line as il on il.track_id=	t.track_id
inner join Invoice as      i  on i.invoice_id=il.invoice_id
inner join customer as     c  on i.customer_id=c.customer_id
inner join top_selling_artist as ta on ta.artist_name=a.artist_name
group by CONCAT(c.first_name,' ',c.last_name), ta.artist_name
order by total_spent_by_customer desc
;


--2  We want to find out the most popular music genre for each country.
     We determine the most popular genre as the genre with the highest number of purchases.
     Write a query that returns each country along with the top genre.
     For countries where the maximum number of purchases is shared, return all genres.

with
popular_genre_count_of_country as
(
select  billing_country,genre_name,COUNT(*)as genre_cnt,
ROW_NUMBER()over(partition by billing_country order by count(*) desc) as genre_rnk
from Genre as g 
inner join Track as t on g.genre_id=t.genre_id
inner join Invoice_line as il on t.track_id=il.track_id
inner join Invoice as i on il.invoice_id=i.invoice_id
group by billing_country,genre_name

)
select billing_country,genre_name
from popular_genre_count_of_country
where genre_rnk = 1


--3  Write a query that determines the customer that has spent the most on music.
     For each country, write a query that returns the country along with the top customer and how much they spent.
     For countries where the top amounts spent is shared, provide all. Customers who spend this amount.

with
customer_rank as
(
select billing_country,c.customer_id,SUM(total)as total_spent ,
ROW_NUMBER()over(partition by billing_country order by sum(total) desc)as customer_rnk
from customer as c
inner join Invoice as i on c.customer_id=i.customer_id
inner join Invoice_line as il on i.invoice_id=il.invoice_id
group by billing_country,c.customer_id
)
select billing_country,c.customer_id,CONCAT(first_name,' ',last_name) as top_customer, total_spent
from customer_rank as cr 
inner join Customer as c on c.customer_id=cr.customer_id
where customer_rnk=1
order by billing_country ;






